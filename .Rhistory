Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,3],Mat[,4])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,5], Mat$qD.95.LCL, Mat$qD.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,5],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,5],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[5]<=xlim[2]){points(out$summary[5],out$summary[3],lwd=5, col=col, pch=pch)}
}
}
plot(y)
lines(y2, col=2)
plot(y)
lines(y2, col=2)
lines.iNEXT <- function(x, type="NvsD", col=1, ...)
{
if(is.null(x$summary[["T"]])){
switch(type, NvsD = NvsD.Ind(x, col=col, method="lines",...),
NvsSC = NvsSC.Ind(x,col=col,...),
SCvsD  = SCvsD.Ind(x,col=col,...))
}else{
switch(type, NvsD = NvsD.Sam(x,col=col,...),
NvsSC = NvsSC.Sam(x,col=col,...),
SCvsD  = SCvsD.Sam(x,col=col,...))
}
}
plot.iNEXT <- function(x, type="NvsD", col=1,...)
{
if(is.null(x$summary[["T"]])){
switch(type, NvsD = NvsD.Ind(x,col=col, method="plot",...),
NvsSC = NvsSC.Ind(x,col=col, method="plot",...),
SCvsD  = SCvsD.Ind(x,col=col, method="plot",...))
}else{
switch(type, NvsD = NvsD.Sam(x,col=col, method="plot",...),
NvsSC = NvsSC.Sam(x,col=col, method="plot",...),
SCvsD  = SCvsD.Sam(x,col=col, method="plot",...))
}
}
lines.iNEXT <- function(x, type="NvsD", col=1, ...)
{
if(is.null(x$summary[["T"]])){
switch(type, NvsD = NvsD.Ind(x, col=col, method="lines",...),
NvsSC = NvsSC.Ind(x,col=col, method="lines",...),
SCvsD  = SCvsD.Ind(x,col=col, method="lines",...))
}else{
switch(type, NvsD = NvsD.Sam(x,col=col, method="lines",...),
NvsSC = NvsSC.Sam(x,col=col, method="lines",...),
SCvsD  = SCvsD.Sam(x,col=col, method="lines",...))
}
}
plot(y)
lines(y2, col=2)
plot(y2)
lines(y, col=2)
x
is.null(x$summary[["T"]])
x$summary
x$summary[["T"]]
names(x$interpolation[,1]) <- "m2"
x
x=iNEXT.Ind(spider$Girdled, q=0)
x2= iNEXT.Ind(spider$Logged, q=1)
plot(x, col=1, pch=1, xlim=c(1, 500), ylim=c(1, 60))
lines(x2, col=2, pch=3)
x2
NvsD.Ind <- function(out, method="plot", xlab="Number of individuals", ylab="Diversity", col, xlim=NULL, ylim=NULL, main=paste("q =", out$order), pch=19,...)
{
if(is.null(xlim)){xlim=range(out$interpolation[,1],out$extrapolation[,1])}
if(ncol(out$interpolation) < 4)
{
if(is.null(ylim)){ylim=range(out$interpolation[,2],out$extrapolation[,2])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
lines(out$interpolation[,1],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){points(out$summary[1],out$summary[2],lwd=5, col=col, pch=pch)}
}
else
{
conf.reg=function(x,LCL,UCL,...)
{
x.sort <- order(x)
x <- x[x.sort]
LCL <- LCL[x.sort]
UCL <- UCL[x.sort]
polygon(c(x,rev(x)),c(LCL,rev(UCL)), ...)
}
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,3],Mat[,4])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,1], Mat$qD.95.LCL, Mat$qD.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,1],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){
points(out$summary[1],out$interpolation[which(out$interpolation==out$summary[1]),2],lwd=5, col=col, pch=pch)}
}
}
plot(x, col=1, pch=1, xlim=c(1, 500), ylim=c(1, 60))
lines(x2, col=2, pch=3)
out$interpolation[which(out$interpolation==out$summary[1]),2]
out
which(out$interpolation==out$summary[1])
out$interpolation[which(out$interpolation[,1]==out$summary[1]),2]
which(out$interpolation[,1]==out$summary[1])
out$interpolation[,1]
out$interpolation$m==out$summary$n
out$interpolation$qD[out$interpolation$m==out$summary$n]
NvsD.Ind <- function(out, method="plot", xlab="Number of individuals", ylab="Diversity", col, xlim=NULL, ylim=NULL, main=paste("q =", out$order), pch=19,...)
{
if(is.null(xlim)){xlim=range(out$interpolation[,1],out$extrapolation[,1])}
if(ncol(out$interpolation) < 4)
{
if(is.null(ylim)){ylim=range(out$interpolation[,2],out$extrapolation[,2])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
lines(out$interpolation[,1],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){points(out$summary[1],out$summary[2],lwd=5, col=col, pch=pch)}
}
else
{
conf.reg=function(x,LCL,UCL,...)
{
x.sort <- order(x)
x <- x[x.sort]
LCL <- LCL[x.sort]
UCL <- UCL[x.sort]
polygon(c(x,rev(x)),c(LCL,rev(UCL)), ...)
}
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,3],Mat[,4])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,1], Mat$qD.95.LCL, Mat$qD.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,1],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){
points(out$summary[1], out$interpolation$qD[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)}
}
}
plot(x, col=1, pch=1, xlim=c(1, 500), ylim=c(1, 60))
lines(x2, col=2, pch=3)
out$interpolation$SC
out$interpolation[,4]
out$interpolation
points(out$summary[1], out$interpolation$SC[out$interpolation$m==500],lwd=5, col=3, pch=1)
points(out$summary[1], out$interpolation$SC[out$interpolation$m==168],lwd=5, col=3, pch=1)
points(out$summary[1], out$interpolation$SC[out$interpolation$m==252],lwd=5, col=3, pch=1)
NvsD.Ind <- function(out, method="plot", xlab="Number of individuals", ylab="Diversity", col, xlim=NULL, ylim=NULL, main=paste("q =", out$order), pch=19,...)
{
if(is.null(xlim)){xlim=range(out$interpolation[,1],out$extrapolation[,1])}
if(ncol(out$interpolation) < 4)
{
if(is.null(ylim)){ylim=range(out$interpolation[,2],out$extrapolation[,2])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
lines(out$interpolation[,1],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){
points(out$summary[1], out$interpolation$qD[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)
}
}
else
{
conf.reg=function(x,LCL,UCL,...)
{
x.sort <- order(x)
x <- x[x.sort]
LCL <- LCL[x.sort]
UCL <- UCL[x.sort]
polygon(c(x,rev(x)),c(LCL,rev(UCL)), ...)
}
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,3],Mat[,4])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,1], Mat$qD.95.LCL, Mat$qD.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,1],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){
points(out$summary[1], out$interpolation$qD[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)
}
}
}
NvsSC.Ind<-function(out, method="plot", xlab="Number of individuals", ylab="Sample coverage", col, xlim=NULL, ylim=NULL, main="", pch=19, ...)
{
if(is.null(xlim)){xlim=range(out$interpolation[,1],out$extrapolation[,1])}
if(ncol(out$interpolation) < 4)
{
if(is.null(ylim)){ylim=range(out$interpolation[,3],out$extrapolation[,3])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
lines(out$interpolation[,1],out$interpolation[,3], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,3], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){
points(out$summary[1], out$interpolation$SC[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)
}
}
else
{
conf.reg=function(x,LCL,UCL,...)
{
x.sort <- order(x)
x <- x[x.sort]
LCL <- LCL[x.sort]
UCL <- UCL[x.sort]
polygon(c(x,rev(x)),c(LCL,rev(UCL)), ...)
}
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,6],Mat[,7])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,1], Mat$SC.95.LCL, Mat$SC.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,1],out$interpolation[,5], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,5], lty=2, lwd=2, col=col)
if(out$summary[1]<=xlim[2]){
points(out$summary[1], out$interpolation$SC[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)
}
}
}
SCvsD.Ind <- function(out, method="plot", xlab="Sample coverage", ylab="Diversity" , col, xlim=NULL,ylim=NULL, main=paste("q =", out$order), pch=19,...)
{
if(ncol(out$interpolation) < 4)
{
if(is.null(xlim)){xlim=range(out$interpolation[,3],out$extrapolation[,3])}
if(is.null(ylim)){ylim=range(out$interpolation[,2],out$extrapolation[,2])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
lines(out$interpolation[,3],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,3],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[4]<=xlim[2]){
points(out$summary[4], out$interpolation$qD[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)
}
}
else
{
conf.reg=function(x,LCL,UCL,...)
{
x.sort <- order(x)
x <- x[x.sort]
LCL <- LCL[x.sort]
UCL <- UCL[x.sort]
polygon(c(x,rev(x)),c(LCL,rev(UCL)), ...)
}
if(is.null(xlim)){ xlim=range(out$interpolation[,5],out$extrapolation[,5]) }
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,3],Mat[,4])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,5], Mat$qD.95.LCL, Mat$qD.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,5],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,5],out$extrapolation[,2], lty=2, lwd=2, col=col)
if(out$summary[4]<=xlim[2]){
points(out$summary[4], out$interpolation$qD[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)
}
}
}
plot(x, col=1, pch=1, xlim=c(1, 500), ylim=c(1, 60))
lines(x2, col=2, pch=3)
plot.iNEXT <- function(x, style="NvsD", col=1,...)
{
if(is.null(x$summary[["T"]])){
switch(style, NvsD = NvsD.Ind(x,col=col, method="plot",...),
NvsSC = NvsSC.Ind(x,col=col, method="plot",...),
SCvsD  = SCvsD.Ind(x,col=col, method="plot",...))
}else{
switch(style, NvsD = NvsD.Sam(x,col=col, method="plot",...),
NvsSC = NvsSC.Sam(x,col=col, method="plot",...),
SCvsD  = SCvsD.Sam(x,col=col, method="plot",...))
}
}
lines.iNEXT <- function(x, style="NvsD", col=1, ...)
{
if(is.null(x$summary[["T"]])){
switch(style, NvsD = NvsD.Ind(x, col=col, method="lines",...),
NvsSC = NvsSC.Ind(x,col=col, method="lines",...),
SCvsD  = SCvsD.Ind(x,col=col, method="lines",...))
}else{
switch(style, NvsD = NvsD.Sam(x,col=col, method="lines",...),
NvsSC = NvsSC.Sam(x,col=col, method="lines",...),
SCvsD  = SCvsD.Sam(x,col=col, method="lines",...))
}
}
plot(x, col=1, pch=1, xlim=c(1, 500), ylim=c(1, 60), style="NvsSC")
plot(x, col=1, pch=1, style="NvsSC")
lines(x2, col=2, pch=3)
lines(x2, col=2, pch=3, style="NvsSC")
plot(x, col=1, pch=1, style="SCvsD")
lines(x2, col=2, pch=3, style="SCvsD")
y
?plot
plot.iNEXT
plot(1:10)
plot(x)
?xlim
x50 <- iNEXT.Sam(ant$h50m, q=0)
x500 <- iNEXT.Sam(ant$h50m, q=0)
plot(x50)
lines(x500)
#' x500 <- iNEXT.Sam(ant$h500m, q=0)
#' plot(x50)
#' lines(x500, col=2)
plot(x50)
lines(x500, col=2)
x500 <- iNEXT.Sam(ant$h500m, q=0)
plot(x50)
lines(x500, col=2)
#' plot(x500)
#' lines(x50, col=2)
plot(x500)
lines(x50, col=2)
#' plot(x50)
plot(x50)
lines(x500, col=2)
plot(x50, ylim=c(1, 300))
lines(x500, col=2)
?lines
N2D<- function(out, method="plot", xlab=xlab, ylab=ylab, col, xlim=NULL, ylim=NULL, main=paste("q =", out$order), pch=19,...)
{
if(is.null(xlim)){xlim=range(out$interpolation[,1],out$extrapolation[,1])}
if(ncol(out$interpolation) < 4)
{
if(is.null(ylim)){ylim=range(out$interpolation[,2],out$extrapolation[,2])}
if(method=="plot")
{
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
}
else
{
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,3],Mat[,4])}
if(method=="plot")
{
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,1], Mat$qD.95.LCL, Mat$qD.95.UCL, col=adjustcolor(col, 0.25), border=NA)
}
if(is.null(out$summary[["T"]]))
{
if(out$summary[1]<=xlim[2])
{
points(out$summary[1],out$interpolation$qD[out$interpolation$m==out$summary$n],lwd=5, col=col, pch=pch)
}
}
if(is.null(out$summary[["n"]]))
{
if(out$summary[1]<=xlim[2])
{
points(out$summary[1],out$interpolation$qD[out$interpolation$t==out$summary$T],lwd=5, col=col, pch=pch)
}
}
lines(out$interpolation[,1],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,2], lty=2, lwd=2, col=col)
}
N2SC<-function(out, method="plot", xlab=xlab, ylab=ylab, col, xlim=NULL, ylim=NULL, main="", pch=19, ...)
{
if(is.null(xlim)){xlim=range(out$interpolation[,1],out$extrapolation[,1])}
if(ncol(out$interpolation) < 4)
{
if(is.null(ylim)){ylim=range(out$interpolation[,3],out$extrapolation[,3])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
lines(out$interpolation[,1],out$interpolation[,3], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,3], lty=2, lwd=2, col=col)
}
else
{
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,6],Mat[,7])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,1], Mat$SC.95.LCL, Mat$SC.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,1],out$interpolation[,5], lty=1, lwd=2, col=col)
lines(out$extrapolation[,1],out$extrapolation[,5], lty=2, lwd=2, col=col)
}
if(out$summary[1]<=xlim[2])
{
points(out$summary[1],out$summary$C.hat,lwd=5, col=col, pch=pch)
}
}
SC2D<- function(out, method="plot", xlab=xlab, ylab=xlab , col, xlim=NULL,ylim=NULL, main=paste("q =", out$order), pch=19,...)
{
if(ncol(out$interpolation) < 4)
{
if(is.null(xlim)){xlim=range(out$interpolation[,3],out$extrapolation[,3])}
if(is.null(ylim)){ylim=range(out$interpolation[,2],out$extrapolation[,2])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
lines(out$interpolation[,3],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,3],out$extrapolation[,2], lty=2, lwd=2, col=col)
}
else
{
if(is.null(xlim)){ xlim=range(out$interpolation[,5],out$extrapolation[,5]) }
Inte <- as.data.frame(out$interpolation)
Extr <- as.data.frame(out$extrapolation)
Mat <- rbind(Inte, Extr)
if(is.null(ylim)){ylim=range(Mat[,3],Mat[,4])}
if(method=="plot"){
plot(0, type="n", xlim=xlim, ylim=ylim, xlab=xlab, ylab=ylab, main=main,...)
}
conf.reg(Mat[,5], Mat$qD.95.LCL, Mat$qD.95.UCL, col=adjustcolor(col, 0.25), border=NA)
lines(out$interpolation[,5],out$interpolation[,2], lty=1, lwd=2, col=col)
lines(out$extrapolation[,5],out$extrapolation[,2], lty=2, lwd=2, col=col)
}
if(out$summary$C.hat<=xlim[2])
{
points(out$summary$C.hat,out$interpolation$qD[out$interpolation[,1]==out$summary[1]],lwd=5, col=col, pch=pch)
}
}
plot.iNEXT <- function(x, style="N2D", col=1,...)
{
if(is.null(x$summary[["T"]]))
{
switch(style,N2D = N2D (x,xlab="Number of individuals",ylab="Diversity",col=col, method="plot",...),
N2SC= N2SC(x,xlab="Number of individuals",ylab="Sample coverage",col=col, method="plot",...),
SC2D= SC2D(x,xlab="Sample coverage",ylab="Diversity",col=col, method="plot",...))
}
else
{
switch(style,N2D = N2D (x,xlab="Number of samlpes",ylab="Diversity",col=col, method="plot",...),
N2SC= N2SC(x,xlab="Number of samlpes",ylab="Sample coverage",col=col, method="plot",...),
SC2D= SC2D(x,xlab="Sample coverage",ylab="Diversity",col=col, method="plot",...))
}
}
x <- iNEXT.Sam(ant$h50m, q=0, endpoint=100)
plot(x)
x <- iNEXT.Ind(spider$Girdled, q=0)
plot(x)
y <- iNEXT.Sam(ant$h500m, q=1, t=round(seq(10, 500, length.out=20)), se=FALSE)
plot(y)
plot.iNEXT <- function(x, style="N2D", col=1,...)
{
if(is.null(x$summary[["T"]]))
{
switch(style,N2D = N2D (x,xlab="Number of individuals",ylab="Diversity",col=col, method="plot",...),
N2SC= N2SC(x,xlab="Number of individuals",ylab="Sample coverage",col=col, method="plot",...),
SC2D= SC2D(x,xlab="Sample coverage",ylab="Diversity",col=col, method="plot",...))
}
else
{
switch(style,N2D = N2D (x,xlab="Number of samlpes",ylab="Diversity",col=col, method="plot",...),
N2SC= N2SC(x,xlab="Number of samlpes",ylab="Sample coverage",col=col, method="plot",...),
SC2D= SC2D(x,xlab="Sample coverage",ylab="Diversity",col=col, method="plot",...))
}
}
plot(y)
plot(x)
lines.iNEXT <- function(x, style="N2D", col=1, ...)
{
if(is.null(x$summary[["T"]]))
{
switch(style,N2D = N2D (x,col=col, method="lines",...),
N2SC= N2SC(x,col=col, method="lines",...),
SC2D= SC2D(x,col=col, method="lines",...))
}
else
{
switch(style, N2D = N2D (x,col=col, method="lines",...),
N2SC= N2SC(x,col=col, method="lines",...),
SC2D= SC2D(x,col=col, method="lines",...))
}
}
plot(x50, ylim=c(1, 300))
lines(x500, col=2)
data(spider)
x <- iNEXT.Ind(spider$Girdled, q=0)
plot(x)
y <- iNEXT.Sam(ant$h500m, q=1, t=round(seq(10, 500, length.out=20)), se=FALSE)
plot(y)
install.packages("C:/Users/Johnson/Dropbox/iNEXT_1.0.zip", repos = NULL)
install.packages("C:/Users/Johnson/Dropbox/iNEXT_1.0.tar.gz", repos = NULL, type = "source")
detach("package:iNEXT", unload=TRUE)
detach("package:iNEXT", unload=TRUE)
install.packages("C:/Users/Johnson/Dropbox/iNEXT_1.0.tar.gz", repos = NULL, type = "source")
library("iNEXT", lib.loc="C:/Users/Johnson/Documents/R/win-library/3.0")
detach("package:iNEXT", unload=TRUE)
install.packages("C:/Users/Johnson/Dropbox/iNEXT_1.0.zip", repos = NULL)
library("iNEXT")
install.packages("C:/Users/Johnson/Dropbox/iNEXT_1.0.zip", repos = NULL)
library("iNEXT", lib.loc="C:/Users/Johnson/Documents/R/win-library/3.0")
